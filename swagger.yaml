openapi: 3.0.0
info:
  title: API Documentation
  version: 1.0.0
  description: API documentation for the application

servers:
  - url: /api
    description: API server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
        profileImage:
          type: string
    Feedback:
      type: object
      properties:
        id:
          type: string
        rating:
          type: number
          minimum: 1
          maximum: 10
          description: امتیاز از 1 تا 10
        unresolvedProblem:
          type: string
          description: مشکلات حل نشده
        dashboardFrequency:
          type: string
          enum: ['هر روز', 'هفتگی', 'ماهانه', 'به ندرت', 'اصلا']
          description: تناوب استفاده از داشبورد
        featureSuggestions:
          type: string
          description: پیشنهادات برای قابلیت‌های جدید
        username:
          type: string
          description: نام کاربری
        email:
          type: string
          format: email
          description: ایمیل کاربر
        fullName:
          type: string
          description: نام کامل کاربر
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Donation:
      type: object
      properties:
        id:
          type: string
        amount:
          type: number
        description:
          type: string
        status:
          type: string
          enum: [pending, approved, rejected]
        createdAt:
          type: string
          format: date-time
    Faq:
      type: object
      properties:
        _id:
          type: string
          example: '64e6e8e8f0b1e65fc1a8f9a1'
        question:
          type: string
          example: 'What is your refund policy?'
        answer:
          type: string
          example: 'We do not offer refunds except in exceptional cases.'
        order:
          type: number
          example: 1
        createdAt:
          type: string
          format: date-time
          example: '2024-01-01T10:30:00.000Z'
        updatedAt:
          type: string
          format: date-time
          example: '2024-01-02T15:45:00.000Z'

paths:
  /auth/check-username:
    post:
      tags:
        - Authentication
      summary: Check username availability
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
      responses:
        '200':
          description: Username availability check result
          content:
            application/json:
              schema:
                type: object
                properties:
                  available:
                    type: boolean

  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
              properties:
                username:
                  type: string
                  minLength: 3
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 6
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input data

  /auth/verify-email:
    post:
      tags:
        - Authentication
      summary: Verify email with code
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - code
              properties:
                code:
                  type: string
                  minLength: 6
      responses:
        '200':
          description: Email verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  token:
                    type: string

  /auth/google:
    get:
      tags:
        - Authentication
      summary: Google OAuth login
      parameters:
        - in: query
          name: username
          schema:
            type: string
      responses:
        '302':
          description: Redirect to Google login

  /auth/google/callback:
    get:
      tags:
        - Authentication
      summary: Google OAuth callback
      responses:
        '200':
          description: Google login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string

  /auth/login:
    post:
      tags:
        - Authentication
      summary: User Login
      description: |
        Authenticate user and get access token.

        **Features:**
        * Email and password authentication
        * JWT token generation
        * Email verification check

        **Security:**
        * Password is hashed using bcrypt
        * JWT token expires in 7 days

        **Prerequisites:**
        * User must have verified email
        * User must be registered
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address
                  example: 'user@example.com'
                password:
                  type: string
                  format: password
                  description: User's password
                  minLength: 6
                  example: 'password123'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Login successful'
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
                    description: JWT access token
                    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Email and password are required'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Invalid email or password'
        '403':
          description: Email not verified
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Please verify your email first'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'User not found'
        '500':
          description: Internal server error

  /user/complete-profile:
    post:
      tags:
        - User
      summary: Complete User Profile Information
      description: |
        This API endpoint enables users to complete and update their profile information. 

        **Features:**
        * Update personal information (full name, biography)
        * Add professional details (website, social media links)
        * Upload or change profile picture

        **Authentication:**
        * Requires valid JWT token in Authorization header

        **File Upload:**
        * Profile image should be in common image formats (JPG, PNG, GIF)
        * Maximum file size: 5MB

        **Response:**
        * Returns updated user object
        * Includes redirect URL for successful updates
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                fullName:
                  type: string
                  description: User's full name
                  example: 'John Doe'
                  minLength: 2
                  maxLength: 100
                bio:
                  type: string
                  description: User's biography or about me section
                  example: 'Software engineer with 5 years of experience'
                  maxLength: 500
                website:
                  type: string
                  description: User's personal or professional website
                  example: 'https://johndoe.com'
                  format: uri
                socialLink:
                  type: string
                  description: User's social media profile link
                  example: 'https://linkedin.com/in/johndoe'
                  format: uri
                profileImage:
                  type: string
                  format: binary
                  description: User's profile picture (max 5MB)
      responses:
        '200':
          description: Profile successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Profile updated successfully'
                  user:
                    $ref: '#/components/schemas/User'
                  redirectTo:
                    type: string
                    example: '/dashboard'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Invalid input data'
                  errors:
                    type: object
                    properties:
                      fullName:
                        type: string
                        example: 'Full name must be between 2 and 100 characters'
                      website:
                        type: string
                        example: 'Invalid website URL format'
        '401':
          description: Unauthorized - Invalid or missing authentication token
        '404':
          description: User not found
        '413':
          description: File too large - Profile image exceeds 5MB limit
        '415':
          description: Unsupported media type - Invalid image format
        '500':
          description: Internal server error

  /feedback:
    post:
      tags:
        - Feedback
      summary: Submit feedback
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - rating
                - dashboardFrequency
                - username
                - email
                - fullName
              properties:
                rating:
                  type: number
                  minimum: 1
                  maximum: 10
                  description: امتیاز از 1 تا 10
                unresolvedProblem:
                  type: string
                  description: مشکلات حل نشده
                dashboardFrequency:
                  type: string
                  enum: ['هر روز', 'هفتگی', 'ماهانه', 'به ندرت', 'اصلا']
                  description: تناوب استفاده از داشبورد
                featureSuggestions:
                  type: string
                  description: پیشنهادات برای قابلیت‌های جدید
                username:
                  type: string
                  description: نام کاربری
                email:
                  type: string
                  format: email
                  description: ایمیل کاربر
                fullName:
                  type: string
                  description: نام کامل کاربر
      responses:
        '201':
          description: Feedback submitted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'فیدبک با موفقیت ثبت شد'
                  feedback:
                    $ref: '#/components/schemas/Feedback'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'خطا در ثبت فیدبک'
                  error:
                    type: string

    get:
      tags:
        - Feedback
      summary: Get all feedbacks
      responses:
        '200':
          description: List of feedbacks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Feedback'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'خطا در دریافت فیدبک‌ها'
                  error:
                    type: string

  /donation:
    post:
      tags:
        - Donation
      summary: Create new donation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - amount
              properties:
                amount:
                  type: number
                  minimum: 1
                description:
                  type: string
      responses:
        '201':
          description: Donation created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Donation'

    get:
      tags:
        - Donation
      summary: Get all donations
      responses:
        '200':
          description: List of donations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Donation'

  /donation/my-donations:
    get:
      tags:
        - Donation
      summary: Get user's donations
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of user's donations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Donation'
        '401':
          description: Unauthorized

  /donation/{id}/status:
    patch:
      tags:
        - Donation
      summary: Update donation status
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [pending, approved, rejected]
      responses:
        '200':
          description: Donation status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Donation'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Admin access required
        '404':
          description: Donation not found

  /faqs:
    get:
      tags:
        - FAQ
      summary: Get all FAQs
      responses:
        '200':
          description: List of FAQs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Faq'
        '500':
          description: Server error

    post:
      tags:
        - FAQ
      summary: Create a new FAQ
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - question
                - answer
              properties:
                question:
                  type: string
                  description: The question to be answered
                answer:
                  type: string
                  description: The answer to the question
                order:
                  type: number
                  description: Order of the FAQ (optional)
      responses:
        '201':
          description: FAQ created successfully
        '400':
          description: Bad request (invalid input)

  /faqs/{id}:
    patch:
      tags:
        - FAQ
      summary: Update an existing FAQ
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                question:
                  type: string
                answer:
                  type: string
                order:
                  type: number
      responses:
        '200':
          description: FAQ updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Faq'
        '404':
          description: FAQ not found
        '500':
          description: Server error

    delete:
      tags:
        - FAQ
      summary: Delete a specific FAQ
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: FAQ deleted successfully
        '404':
          description: FAQ not found
        '500':
          description: Server error
